import numpy as np
from QCompute.QPlatform.QOperation.RotationGate import RY
from QCompute.QPlatform import BackendName
from qapp.circuit import ParameterizedCircuit
from qapp.optimizer import SMO
from vqasd import VQASD3
import os, time

from QCompute import Define

Define.Settings.outputInfo = False

# Please input your token of Quantum Leaf https://quantum-hub.baidu.com/
Define.hubToken = "your token"


class Ansatz(ParameterizedCircuit):
    def __init__(self, num: int, parameters: np.ndarray):
        super().__init__(num, parameters)

    def add_circuit(self, q):
        for j in range(self._num):
            RY(self._parameters[j])(q[j])

# Choose backend, can be CloudBaiduSim2Water, or LocalBaiduSim2, or CloudIoPCAS
backend = BackendName.LocalBaiduSim2
# backend = BackendName.CloudBaiduSim2Water
# backend = BackendName.CloudIoPCAS

# Totally 20 experiments
for sample in range(20):
    print('\nSampling %d-th state...' % (sample + 1))
    num_qubits = 2
    parameters = 2 * np.pi * np.random.rand(num_qubits)
    ansatz = Ansatz(int(num_qubits), parameters)
    opt = SMO(5, ansatz)
    vsd = VQASD3(num_qubits, ansatz, opt, backend)

    start = time.time()
    vsd.run(40000)
    end = time.time()

    coefficients_solved = vsd.schmidt_coefficients

    print('Total time:', end - start)

    # save data generated by simulator
    filename = '.\data_3\Simulator_data_loss_list_time=' + str(sample) + '.npz'
    if backend == BackendName.CloudIoPCAS:
        # save data generated by quantum device
        filename = '.\data_3\Quantum_Device_data_loss_list_time='+str(sample)+'.npz'
    # os.makedirs("data_3", exist_ok=True)
    # np.savez(filename, loss=opt._loss_history, coeff=coefficients_solved)
